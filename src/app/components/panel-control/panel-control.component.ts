import { CommonModule, isPlatformBrowser } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import {
  Component,
  HostListener,
  Inject,
  OnInit,
  PLATFORM_ID,
} from '@angular/core';

@Component({
  selector: 'app-panel-control',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './panel-control.component.html',
  styleUrls: ['./panel-control.component.css'],
})
export class PanelControlComponent implements OnInit {
  activeSection: string | null = null;
  isMobileView = false;
  isSidebarVisibleOnSmallScreens = true;

  // ‚è± Variable para manejar el temporizador de inactividad
  timeoutInactivity: any;

  // Tiempo de inactividad permitido (2 minutos)
  inactiveTime = 60 * 60 * 1000;
  isSidebarOpen = false;
  windowWidth: number = 0;

  userRole: string = '';
  userName: string = '';
  userPermissions: string[] = [];

  nombre_usuario: string = '';
  apellido: string | null = '';
  imagenUrl: string | null = '';
  usuario_id: number = 0;

  idParaEditar: number = 0;

  permisos: string[] = [];
  roles: string[] = [];

  constructor(
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object,
  ) {}

  ngOnInit(): void {
    const usuario = JSON.parse(localStorage.getItem('usuarioLogueado') || '{}');

    this.userRole = usuario.roles || '';
    this.userName = `${usuario.nombre || ''} ${usuario.apellido || ''}`.trim();
    this.userPermissions = usuario.permisos || [];
    this.imagenUrl = usuario.imagen_url;

    this.checkScreenSize();
    this.resetInactivityTimer();
  }

  puedeVer(permiso: string): boolean {
    return this.userPermissions.includes(permiso);
  }

  // üìè Revisa el tama√±o de la pantalla para ajustar la vista
  @HostListener('window:resize')
  onResize() {
    this.checkScreenSize();
  }

  // üß† Determina si estamos en vista m√≥vil y ajusta visibilidad del sidebar
  @HostListener('window:resize')
  checkScreenSize() {
    this.windowWidth = window.innerWidth;
    // En desktop (>= 768px), el sidebar est√° abierto por defecto
    if (this.windowWidth >= 768) {
      this.isSidebarOpen = true;
    } else {
      this.isSidebarOpen = false;
    }
  }
  toggleSidebar() {
    this.isSidebarOpen = !this.isSidebarOpen;
  }
  // M√©todo para cerrar el sidebar en m√≥vil cuando se hace clic fuera
  @HostListener('document:click', ['$event'])
  handleOutsideClick(event: MouseEvent) {
    if (this.windowWidth >= 768) return;

    const target = event.target as HTMLElement;
    const clickedInsideSidebar = target.closest('.sidebar');
    const clickedInsideToggleButton = target.closest('.toggle-button');

    if (
      !clickedInsideSidebar &&
      !clickedInsideToggleButton &&
      this.isSidebarOpen
    ) {
      this.isSidebarOpen = false;
    }
  }
  // üîÑ Alterna visibilidad de secciones
  toggleSection(section: string) {
    this.activeSection = this.activeSection === section ? null : section;
  }

  // ‚úÖ Verifica si una secci√≥n est√° activa
  isActive(section: string) {
    return this.activeSection === section;
  }

  // üì± Cierra el sidebar en m√≥viles despu√©s de una acci√≥n
  closeSidebarOnMobile() {
    if (this.isMobileView) {
      this.isSidebarVisibleOnSmallScreens = false;
    }
  }

  // üëÇ Escucha eventos del usuario para detectar actividad
  @HostListener('document:mousemove')
  @HostListener('document:keydown')
  @HostListener('document:click')
  handleUserActivity() {
    this.resetInactivityTimer();
  }

  // üîÑ Reinicia el temporizador de inactividad
  resetInactivityTimer() {
    if (this.timeoutInactivity) {
      clearTimeout(this.timeoutInactivity);
    }

    this.timeoutInactivity = setTimeout(() => {
      this.handleSessionTimeout();
    }, this.inactiveTime);
  }

  // üö™ Cierra sesi√≥n por inactividad
  handleSessionTimeout() {
    alert('Sesi√≥n cerrada por inactividad');
    localStorage.clear();
    this.router.navigate(['/index']);
  }
  verPerfil(): void {
    this.router.navigate(['app-panel-control/perfil']);
  }
  private getUsuarioLocalStorage() {
    if (typeof window !== 'undefined') {
      // Verifica si localStorage est√° disponible
      try {
        const usuario = localStorage.getItem('usuario');
        return usuario ? JSON.parse(usuario) : null;
      } catch (error) {
        console.error('Error al recuperar usuario de localStorage', error);
        return null;
      }
    }
    return null; // Devuelve null si localStorage no est√° disponible
  }

  // M√©todo para manejar el evento de selecci√≥n
  onSelectChange(action: string) {
    if (action === 'cerrarSesion') {
      this.confirmarCerrarSesion(); // Maneja el cierre de sesi√≥n
    }
  }

  confirmarCerrarSesion() {
    console.log('Intentando cerrar sesi√≥n...');
    const confirmar = window.confirm(
      '¬øEst√° seguro de que desea cerrar sesi√≥n?',
    );
    if (confirmar) {
      this.logout(); // Si el usuario acepta, se cierra sesi√≥n
    } else {
      console.log('Cierre de sesi√≥n cancelado.');
    }
  }

  // üîê Cierra la sesi√≥n y redirige
  logout() {
    // Limpia todo el localStorage
    localStorage.clear();
    // Redirige al usuario a la p√°gina de inicio
    this.router.navigate(['/index']);
  }
}
